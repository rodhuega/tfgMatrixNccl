function [m,sm,pA,nProd]=selecciona_ms_conEstNormaConPotenciasNuevo(f,metodo_f,plataforma,A,mmin,mmax)
% [m,sm,pA,nProd]=selecciona_ms_conEstNormaConPotenciasNuevo(f,metodo_f,plataforma,A,mmin,mmax)
%
% Obtiene los valores apropiados del grado del polinomio (m) y el escalado
% (s) de la matriz estimando la norma de las potencias de la matriz tras 
% calcular explícitamente dichas potencias.
%
% Datos de entrada:
% - f:          Función a aplicar sobre la matriz ('exp','cos','cosh', ...)
%               o acción de la función ('expv','cosv','coshv', ...).
% - metodo_f:   Método a emplear para calcular f(A) (taylor, bernoulli,
%               hermite, ...).
% - plataforma: Decide si calculamos la función matricial mediante Matlab
%               ('sinGPUs') o mediante GPUs ('conGPUs').
% - A:          Matriz de la cual calculamos f(A).
% - mmin:       Valor mínimo del grado del polinomio de aproximación.
%               Valores posibles son 2, 4, 6, 9, 12, 16, 20, 25, 30, 36, 42
%               49, 56, 64.
% - mmax:       Valor máximo del grado del polinomio de aproximación.
%               Valores posibles son 2, 4, 6, 9, 12, 16, 20, 25, 30, 36, 42
%               49, 56, 64.
%
% Datos de salida:
% - m:          Orden de la aproximación polinómica a f(A). Coincide con el 
%               grado del polinomio de aproximación a f(A).
% - sm:         Valor del escalado de la matriz.
% - pA:         Vector de celdas con las potencias de A, de modo que pA{i}
%               contiene A^i, para i=1,2,3,...,q, siendo q=ceil(sqrt(m)).
%               Si empleamos la función coseno y sólo trabajamos con los
%               términos pares del polinomio, el vector tendrá las
%               potencias de B, siendo B=A^2.
% - nProd:      Número de productos matriciales llevados a cabo al calcular  
%               las potencias de A.

% Elegimos los tipos de errores que proporcionan mejores resultados

% A PRIORI, LOS RESULTADOS SON MEJORES CON BACKWARD RELATIVOS

switch f
    case {'exp','expv'}
        %tipo_error_1='forward';
        tipo_error_1='backward';
        %tipo_error_2='absoluto';
        tipo_error_2='relativo';
    case 'cos'
        %tipo_error_1='forward';
        tipo_error_1='backward';
        %tipo_error_2='absoluto';
        tipo_error_2='relativo';
    case 'cosh'
        tipo_error_1='forward';
        tipo_error_2='absoluto';        
    otherwise
        error('Función matricial no contemplada');
end

% Obtenemos los valores de theta y M
[theta,M]=get_theta(f,metodo_f,tipo_error_1,tipo_error_2);
pot=ceil(sqrt(M));

% Buscamos las posiciones (imin e imax) de mmin y mmax en el vector M
if mmin<M(1)
    mmin=M(1);
elseif mmin>M(end)
    mmin=M(end);
end

if mmax<M(1)
    mmax=M(1);
elseif mmin>M(end)
    mmax=M(end);
end

if mmin>mmax
    error('Valor mmin mayor que mmin');
end 

i=1;
encontrado=0;
while i<=length(M) && encontrado==0
    if M(i)==mmin
        imin=i;
        encontrado=1;
    else
        i=i+1;
    end
end
if (encontrado==0)
    error('Valor mmin no permitido (emplear 2, 4, 6, 9, 12, 16, 20, 25, 30, 36, 42, 49, 56 o 64)');
end

i=1;
encontrado=0;
while i<=length(M) && encontrado==0
    if M(i)==mmax
        imax=i;
        encontrado=1;
    else
        i=i+1;
    end
end
if (encontrado==0)
    error('Valor mmax no permitido (emplear 2, 4, 6, 9, 12, 16, 20, 25, 30, 36, 42, 49, 56 o 64)');
end

% En caso de trabajar únicamente con los términos pares del polinomio, 
% obtenemos potencias de B=A^2
switch f
    case 'exp'
        factor_s=1;
    case 'cos'
        switch metodo_f
            case 'taylor'
                A=A*A;
                factor_s=0.5;
            case 'bernoulli'
                formulacion=get_formulacion_cos_bernoulli;
                switch formulacion
                    case 'terminos_pares_polinomio_solo_pares'
                        A=A*A;
                        factor_s=0.5;
                    case {'terminos_pares_polinomio_completo','terminos_pares_impares_polinomio_completo'}
                        factor_s=1;
                end
        end
end
% Cada componente del vector c estará formado por el coeficiente de mayor 
% orden de los polinomios de orden m=2, 4, 6, 9, 12, 16, 20, 25, 30, 36, 
% 42, 49, 56, 64.   
switch f
    case {'exp','expv'}     
        switch metodo_f
            case {'taylor','taylor_bernoulli'}
                c=vpa([1/2, 1/24, 1/720, 1/362880, 1/479001600, 1/20922789888000, 1/2432902008176640000, 1/15511210043330986055303168, 1/265252859812191032188804700045312, 1/371993326789901177492420297158468206329856, 1/1405006117752879788779635797590784832178972610527232, 1/608281864034267522488601608116731623168777542102418391010639872, 1/710998587804863481025438135085696633485732409534385895375283304551881375744, 1/126886932185884165437806897585122925290119029064705209778508545103477590511637067401789440]);
            case 'bernoulli'
                c=vpa([1934613350591413/2251799813685248, 1934613350591413/27021597764222976, 1934613350591413/810647932926689280, 1934613350591413/408566558195051397120, 1934613350591413/539307856817467844198400, 1934613350591413/23556967185786995434586112000, 1934613350591413/2739204144363311829133673103360000, 1934613350591413/17464069942802730978104876446565984632832, 1934613350591413/298648170152285486541805842340434348111652978688, 1934613350591413/418827251978827522481019018066584581083630589284024582144, 1934613350591413/1581896257091284160381694378362351503325668515799159736213090336768, 1934613350591413/684864494050239481748780073519512412990706924028991916448058871191601443504128, 1934613350591413/800513243774733013679858865737379924724552612330200369222259688023035332288044772418912256, 1934613350591413/142861985127633330739513693855108127853356657352424120353951214436608163739431367321068067010158065090560]);
        end
    case 'cos'
         switch metodo_f
            case 'taylor'
                c=vpa([1/24, 1/40320, 1/479001600, -1/6402373705728000, 1/620448401733239409999872, 1/263130836933693517766352317727113216, 1/815915283247897683795548521301193790359984930816, -1/30414093201713375576366966406747986832057064836514787179557289984, 1/8320987112741391580056396102959641077457945541076708813599085350531187384917164032, 1/61234458376886076682034243918084408426143679367126656631657903381829221022872956916891969827292894461952, 1/3314240134565351991893962785187002255986138585985099085000359647021178112607661449751964466234594461331925608329126314254532608, -1/9426890448883242029410148360874034376137592466180063696357188182614769297217373775790759257383412737431326439501183709769874985637770333212700442263289856, 1/197450685722107283218203224975563190350604098858598125302874203564961210901795886052940088784315404959246758100114554585320567376838138578357747136064291560700269291680195376450633728, 1/385620482362580254065032983367256046768928224415294665452474122816236575174870722402856406966606225777437456487212434754604702120071219780114893563585389807556408608834254609008155210269502377566782820110682950729728, -1/265252859812191032188804700045312, 1/263130836933693517766352317727113216, -1/295232799039604119555149671006000381952, 1/371993326789901177492420297158468206329856, -1/523022617466601037913697377988137380787257344, 1/815915283247897683795548521301193790359984930816, -1/1405006117752879788779635797590784832178972610527232, 1/2658271574788448529134213028096241889243150262529425408, -1/5502622159812088456668950435842974564586819473162983440384, 1/12413915592536072528327568319343857274511609591659416151654400, -1/30414093201713375576366966406747986832057064836514787179557289984, 1/80658175170943876845634591553351679477960544579306048386139594686464, -1/230843697339241379243718839060267085502544784965628964557765331531071488, 1/710998587804863481025438135085696633485732409534385895375283304551881375744, -1/2350561331282878906297796280456247634956966273955390268712005058924708557225984, 1/8320987112741391580056396102959641077457945541076708813599085350531187384917164032, -1/31469973260387939390320343330721249710233204778005956144519390914718240063804258910208, 1/126886932185884165437806897585122925290119029064705209778508545103477590511637067401789440, -1/544344939077443069445496060275635856761283034568718387417404234993819829995466026946857533440, 1/2480035542436830547970901153987107983847555399761061789915503815309070879417337773547217359994880, -1/11978571669969890269925854460558840225267029209529303278944419871214396524861374498691473966836482048, 1/61234458376886076682034243918084408426143679367126656631657903381829221022872956916891969827292894461952, -1/330788544151938558975078458606627397928594841525087028177611631961228972749086355889619432768006702663467008, 1/1885494701666049846649767567286674986020753759697889931196791720482648043560619012598537844549685032003930423296, -1/11324281178206294606285193764734547659641544873910049469239570110699644621282776159978832493218689331409071173009408, 1/71569457046263778832073404098641551692451427821500630228331524401978643519022131505852398484420816675798776564959674368, -1/475364333701283981804950871934204857403260987909684614932289567004882674634326008655216234173410083475042065689611178344448, 1/3314240134565351991893962785187002255986138585985099085000359647021178112607661449751964466234594461331925608329126314254532608]);
            case 'bernoulli'
                formulacion=get_formulacion_cos_bernoulli;
                switch formulacion
                    case 'terminos_pares_polinomio_completo'
                        % Valores desde m=2 hasta m=64
                        c=vpa([-3789648413623927/9007199254740992, 3789648413623927/108086391056891904, -3789648413623927/3242591731706757120, 0, 3789648413623927/2157231427269871376793600, 3789648413623927/94227868743147981738344448000, 3789648413623927/10956816577453247316534692413440000, 0, -3789648413623927/1194592680609141946167223369361737392446611914752, 3789648413623927/1675309007915310089924076072266338324334522357136098328576, -3789648413623927/6327585028365136641526777513449406013302674063196638944852361347072, 0, 3789648413623927/3202052975098932054719435462949519698898210449320801476889038752092141329152179089675649024, 3789648413623927/571447940510533322958054775420432511413426629409696481415804857746432654957725469284272268040632260362240]);
                    case 'terminos_pares_impares_polinomio_completo'  
                        % Valores desde m=2 hasta m=64
                        c=vpa([-3789648413623927/9007199254740992, 3789648413623927/108086391056891904, -3789648413623927/3242591731706757120, -350940314366717/3268532465560411176960, 3789648413623927/2157231427269871376793600, 3789648413623927/94227868743147981738344448000, 3789648413623927/10956816577453247316534692413440000, -32952807878419678718239430334293/13118815206829737393820665839757267571429307448972820873216, -3789648413623927/1194592680609141946167223369361737392446611914752, 3789648413623927/1675309007915310089924076072266338324334522357136098328576, -3789648413623927/6327585028365136641526777513449406013302674063196638944852361347072, -58425012503609228106612016542043/912137249329553580070061324782764162706238607963231729314430823045547287170519637271043928752128, 3789648413623927/3202052975098932054719435462949519698898210449320801476889038752092141329152179089675649024, 3789648413623927/571447940510533322958054775420432511413426629409696481415804857746432654957725469284272268040632260362240]);
                    case 'terminos_pares_polinomio_solo_pares'
                        % Valores desde m=2 hasta m=25 (en realidad, el
                        % grado del polinomio será el doble)
                        % c sin m=18
                        
                        c=vpa([3789648413623927/108086391056891904, 3789648413623927/181585136975578398720, 3789648413623927/2157231427269871376793600, -3789648413623927/28833727835403282411933401088000, 3789648413623927/2794251190848436811425681877695056576512, 3789648413623927/1185035939164268872905447884824775035672994970075136, 3789648413623927/3674555765601124706058009365047973453867951424701771382559604736, -3789648413623927/136972898810047893881499178722093419365687610969772625815507975787950493677912064]);
                        % c con m=18
                        %c=vpa([3789648413623927/108086391056891904, 3789648413623927/181585136975578398720, 3789648413623927/2157231427269871376793600, -3789648413623927/28833727835403282411933401088000, 3789648413623927/2794251190848436811425681877695056576512, 3789648413623927/1185035939164268872905447884824775035672994970075136, 3789648413623927/1675309007915310089924076072266338324334522357136098328576, 3789648413623927/3674555765601124706058009365047973453867951424701771382559604736, -3789648413623927/136972898810047893881499178722093419365687610969772625815507975787950493677912064]);                        
                end
        end       
end
c=double(c);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Cálculo de las potencias previas a imin
pA{1}=A;
nProd=0;
for im=1:imin-1
    j=pot(im);
    if sqrt(M(im))>floor(sqrt(M(im)))
        switch plataforma
            case 'sinGPUs'
                pA{j}=pA{j-1}*A;
            case 'conGPUs'
                pA{j}=call_gpu('power');
        end
        nProd=nProd+1;        
    end
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Cálculo de las potencias entre imin e imax
fin=0;
im=imin;
while fin==0 && im<=imax    
    j=pot(im);
    if sqrt(M(im))>floor(sqrt(M(im)))
        switch plataforma
            case 'sinGPUs'
                pA{j}=pA{j-1}*A;
            case 'conGPUs'
                pA{j}=call_gpu('power');
        end
        nProd=nProd+1;        
    end  
    switch tipo_error_2
        case 'absoluto' % Error absoluto
            % Hay que calcular ||A^(m+1)|| a partir de A^j y de A
            a(im)=norm1pp(pA{j},M(im)/j,A); 
            alfa(im)=a(im)^(1/(M(im)+1));
        case 'relativo' % Error relativo
            a(im)=norm1p(pA{j},M(im)/j);
            alfa(im)=a(im)^(1/M(im));
    end   
    if alfa(im)<theta(im)   
        fin=1;     
    else
        im=im+1;
    end
end

if fin==1
    sm=0;
else
    im=imax; % se habrá salido en el bucle anterior porque im>imax
    sm=ceil(max(0,factor_s*log2(alfa(im)/theta(im))));
    if abs(c(im)*a(im)/(2/factor_s)^((sm-1)*M(im)))<eps/2 % La base de la
        % potencia del denominador puede ser 2 (polinomio completo) o 4 
        % (sólo términos pares)
        sm=sm-1;
        if abs(c(im)*a(im)/(2/factor_s)^((sm-1)*M(im)))<eps/2 && sm>0
            sm=sm-1;
        end
    end    
end  
m=M(im);
end

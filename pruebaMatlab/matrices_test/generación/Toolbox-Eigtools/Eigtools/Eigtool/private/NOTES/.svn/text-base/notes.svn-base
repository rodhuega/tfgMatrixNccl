EigTool log

Problems in EigTool 2.04 (December 2002) under R2007a/b:
* [done] Version 7 uses a new contour structure
* [done] Look and feel of the GUI when rendered in Java (as opposed to X11)
* MEX files need to be (re)compiled on Windows, Mac, Linux
  [done] Intel Mac
         PowerPC Mac
  [done] Linux 32 bit
  [done] Linux 64 bit
  [done] Windows (R2008a)
         Windows (< R2008a)
* [done] Run ARPACK on a mtx of size > 1000 with opts.print_plot = 1.  Crash. (Josef)
* [done] "BE" option has been abrogated for nonsymmetric matrices (Jesse Chan).
          Same for Large Alg. and Small Alg. options.
* [done] "AXLIMDLG function is obsolete." when run with a large upper triangular matrix
* [done] Run eigtool(sparse(randn(1700))) and choose "sparse direct": AXLIMDLG problem.
* [done] psacore.mexmaci is having all sorts of trouble with rectangular matrices on R2008a.
* [done] tweaked the placement of text boxes and other items in the GUI -- much better on the Mac.
* [done] eigtool(sparse(triu(randn(1000)))) and click "Direct": bug!
* [done] Run ARPACK, convert to dense, hit Field of Values:  error because no Schur form
* Update documentation regarding ARPACK change.
* Performance bug:  Diagonal matrices are really slow, because we force triangular solves!
* Possible bug: when switching between ARPACK and direct, make sure Schur factorization is maintained,
  and check implications for switch_method FOV button.

Other issues addressed September 2006 (ME & TGW), not publicly released:
* psacore.m - Hessenberg bug - using m not n
* psacore - triangular solves (\ to linsolve)
* gausssiedel_demo - change input argument to match help ('C' not 'N')
* set_demo_params - change Gauss Siedel argument to match change above

Wish list/unaddressed issues:
* Check for a real, symmetric matrix, then re-enable the BE, LA, SA options
  for ARPACK.  See also line 16 of switch_which.m for how SM is handled.
* The heart of the ARPACK call is eigs65.m.  It may be that we want to have
  an "eigs7x.m"...but there don't seem to be any problems as present.

--------------------------------------------------------------------------------

26 Jan 2008

Working on updating the "contour" command in version 2.04.

Problem:
Version 7 of Matlab changes contours drawn with the "contour" command
from "patch" objects to "contourgroup" objects.

Effect:
The "thick lines" option (a default) no longer works.  As a result,
EigTool produces plots with lines of thickness 0.5, which look anemic
when printed and dreadful when projected in a talk.  Note that the
colorbar always has thick lines, which remain thick.

Temporary Fix:
In September 2006, TGW suggested that we change
    contour(...)
to
    contour('v6',...)
which did the trick.  (This was not publicly released.)

New wrinkle:
With R2007b, MATLAB has begun to issue a warning message that the 'v6'
option will be deprecated "in a future release".

Notes:
The "contour" routine is called in three routines: "switch_redrawcontour.m"
"setup_print_fig.m", and "arpackgui_update.m".  The first is used for most
of the screen output (see notes below for the route by which EigTool can reach
this routine); the second is used under "Printable Plot" option; the third
is used for monitoring ARPACK iterations for sparse A.

Status of "switch_redrawcontour.m":
Fixed main problem by adding code to "switch_redrawcontour.m".
Made every attempt to keep within TGW's original framework, and hopefully
succeeded.  (Important note: we would like this to still work with Version 6,
so we have used TGW's "this_ver" variable to add new code only for Version >= 7.
We have added an argument to the "contour" call in all cases, but this should
still work fine in Version 6; in that version, the second argument is a vector
of handles to each contour line (patch), whereas it is now a single handle to a
"contourgroup" object.   We do not need the handles under Version 6, but they
should not cause any errors.)

Status of "setup_print_fig.m":
This routine seems to be called only a printable plot is called from the
outset via opts.print_plot = 1.  The GUI's "Printable Plot" menu item seems
to work fine with the fix to "switch_redrawcontour.m".  In any case, the
fix here is very similar to "switch_redrawcontour.m", except we now define
a local version of "this_ver" (rather than adding another input argument).
Note that we also fixed the (old) calling sequence specified in the comment
block.

Status of "arpackgui_update.m":
This occurrence of "contour" is used when pseudospectra of the upper
Hesseberg matrix are plotted *during* the ARPACK run to show progress.
The fix is a mix of the edits made to "switch_redrawcontour.m" and
"setup_print_fig.m". N.B.  To debug this feature (which is usually set
manually from the ARPACK menu) without a menu bar, insert
       cur_state3 = 'on'; % mpe debug
after line 163.

--------------------------------------------------------------------------------

26 Jan 2008

Regarding look and feel...

On my laptop (Mac PowerBook G4), menus are not displayed when I run
  matlab -nojvm -nosplash 
from a terminal window.  Menus work in the full MATLAB desktop, or running
  matlab -nodesktop -nosplash

However, the look-and-feel of the buttons degrades significantly...
For example, Stop and Pause remain square as before, but the other
buttons in the column look completely different...

--------------------------------------------------------------------------------

26 Jan 2008

Need to update the MEX files for modern versions of MATLAB...

Problems: Michael Overton noted that the Windows MEX files no longer function.
          There have never been any MEX files for the Mac (PowerPC or Intel).

Goal:     First learn how to compile MEX files on my Intel Mac....

Status:   Need to get Xcode installed on campion.caam.rice.edu....      

--------------------------------------------------------------------------------

1 Feb 2008

Got Xcode installed on the campion.caam.rice.edu earlier this week.
Playing around with psacore.c (from TGW).

When I attempted to compile roughly following TGW's guidelines in 
his "update.m" script, I ran into some problems due to the apparent
redefinition of "mxGetM" and "mxGetN" routines.  I simply commented
out the "extern" definition lines, and all eventually compiled fine
on my Mac [MacPro].  In fact, all I neeed in the end was:

  mex -O psacore.c

TGW mentioned that there was a concern about whether the zbandqrf.c
routine required underscores or not, but that doesn't appear to be
an issue here.  In fact, it doesn't seem that we even need the full
  
  mex -O psacore.c zbandqrf.c

** Before we issue this, I might want to run this by TGW. **

*** 14 March 09 bug:
***
*** ** On R2008a, we need to use the ** NO UNDERSCORE VERSION ** of zbandqrf.c:
***   mex -O psacore.c zbandqrf.c
*** 
*** (This version works with R2007a, too, on campion.caam.rice.edu.)

Placing the resulting psacore.mexmaci improved performance on the
computation of the psa of a 500x500 random matrix by 50%.

I next compiled with

  mex -O psacore.c

on  caampc41, which generated psacore.mexa64.  ** This was using R2006a.
and caampc4,  which generated psacore.mexglx.  ** This was using R2006a.

17 Feb 2008

Need to update XCode for G4 in order to compile for PowerBook...
Need to find someone with a C compiler and Windows... or install gcc 
  under Cygwin on Euler, and use Gnumex:

  http://gnumex.sourceforge.net/

14 Aug 2008

Working on compiling the mex (dll) files for Windows on the PC in the Strings
Lab using R2007b.

To compile MATLAB's standard "yprime.c" MEX test files, the command

   mex yprime.c -output yprime.dll

gives two compiler options, "Lcc-win32 C 2.4.1", stored within the R2007b directory,
and "Microsoft Visual C+ .NET 2003".  I chose the former, and this command constructed
a perfectly working yprime.dll file.  I added a printf statement just to make sure
I was getting the right "yprime" routine, and that worked just fine.

Now, on to the psacore.c file.  Many problems.  One needs to explicitly link the
libraries here, so that it takes the command

mex psacore.c zbandqrf.c "C:\Program Files\matlab\R2007b\extern\lib\win32\lcc\libmwblas.lib" "C:\Program Files\matlab\R2007b\extern\lib\win32\lcc\libmwlapack.lib"

Note that this will generate psacore.mexw32.  Apparently the psacore.dll appellation
has been deprecated as of R14, so perhaps we should use

mex psacore.c zbandqrf.c "C:\Program Files\matlab\R2007b\extern\lib\win32\lcc\libmwblas.lib" "C:\Program Files\matlab\R2007b\extern\lib\win32\lcc\libmwlapack.lib"  -output psacore.dll

to generate something that will work on older versions of matlab.

UNFORTUNATELY, this does not work: It seems, e.g., from
   http://www.mathworks.de/matlabcentral/newsreader/view_thread/157816
that R2007b has a problem linking multiple libraries, so you can get either
the LAPACK library, or the BLAS library, but not both........

We went to R2008a (on a podium) and repeated the above procedure.  This worked (using 
the zbandqrf.c.underscore version of zbandqrf.c, I think), *** but it was not
backward compatible.  Argh.

15 Aug 2008

Kerry Bohannon installed R2007a and R2008a on the Strings Lab PC (which already had R2007b).
I compiled the MEX file on R2007a: but note that the BLAS and LAPACK libraries were
apparently consolidated in this version, so we use

mex -O psacore.c zbandqrf.c "C:\Program Files\matlab\R2007a\extern\lib\win32\lcc\libmwlapack.lib" 

*** Unfortunately, this does not work on R2007b or R2008a.

I tried compiling under R2007b with the R2007a library, but this did not work.

So, the best solution seems to be the following:
  -- Package up versions of the software for R2007a, R2007b, R2008a.
  -- The R2007b version of the software will not have a MEX file for Windows.

--------------------------------------------------------------------------------

26 Jan 2008

Regarding look and feel...

On my laptop (Mac PowerBook G4), menus are not displayed when I run
  matlab -nojvm -nosplash
from a terminal window.  Menus work in the full MATLAB desktop, or running
  matlab -nodesktop -nosplash

However, the look-and-feel of the buttons degrades significantly...
For example, Stop and Pause remain square as before, but the other
buttons in the column look completely different...

10/16/17 Feb 2008

The color of the Stop! and Go buttons is controlled in the 
eigtoolgui.m and toggle_go_btn.m routines.

The initial "Go!" button color is controlled by line 987 of eigtoolgui.m:
       'BackgroundColor',[0 0.921 0.38375], ...
But when the "Go!" button is redrawn after a computation, it is controlled by
line 38 of toggle_go_btn.m:
        set(h,'BackgroundColor',[0 0.921 0.38375]);

When the button color is substantially far from gray, it will take a 
rectangular shape; if it is gray, MATLAB R2007b is drawing it as a
Mac-style button with rounded corners...  How close to gray can it be
while still producing a rectangular button?

target:
   'BackgroundColor',[0.701960784313725 0.701960784313725 0.701960784313725], ...

   'BackgroundColor',[0.70 0.71 0.70], ...       % rectangular button
   'BackgroundColor',[0.70 0.705 0.70], ...      % rectangular button
   'BackgroundColor',[0.702 0.705 0.702], ...    % rectangular button
   'BackgroundColor',[0.702 0.704 0.702], ...    % rounded button
   'BackgroundColor',[0.702 0.703 0.702], ...    % rounded button
   'BackgroundColor',[0.702 0.701 0.702], ...    % rounded button

The algorithm seems to be something like 
    RGB value = floor([0.702 0.704 0.702]*256)  (or ceil)
which gives [179 180 179] (or [180 181 180]).

This doesn't seem like a robust fix, but it should do the trick for now...
Eventually, we may need to completely rewrite the GUI...  but I am not
anxious to do this!

This fix works when eigtool is used in the standard mode (eigtool(A)), but
when I use "eigtool" by itself, the "Quit" button stays round, though the
background behind it has the color set in eigtoolgui.   To fix this, 
I inserted a new line 35 to "enable_controls.m" to set the button color:
        set(the_handle,'backgroundcolor',[0.702 0.705 0.702]);  % mpe addition: keeps button rectangular
This seems to do the trick.

The Pause button flips to a rounded button when it is pressed...  To fix this,
I inserted two lines of code in toggle_pause_btn.m: one to make the "Resume"
button an off-gray button and thus rectangular (new line 39):
     set(h,'BackgroundColor',[1 .86 .18]);          % mpe addition: keeps button rectangular
and the other to color the "Pause" button yellow when "Resume" is pressed 
(new line 35):
     set(h,'BackgroundColor',[0.702 0.705 0.702]);  % mpe addition: keeps button rectangular

During ARPACK mode, the "Mode+Cond.No" button flips to "Ritz Vec+Resid" and this
button is currently rounded.  To fix this, I tried adding 
     set(h,'BackgroundColor',[0.702 0.705 0.702]);  % mpe addition: keeps button rectangular
to new lines 36 and 41 of toggle_mode_btn.m, and this works for most computations...
but when I hit "Stop", the button reverts to "Mode+Cond.No" in its rounded version...

When "Stop" is pressed, switch_stop.m is called, then toggle_go_btn.m.
The Mode button is rounded *after* the call to switch_stop.m

switch_stop.m is called by eigtool_switch_fn.m, but the Mode button seems OK 
   after this calling sequence.

Let's try to start from the top down.  When the gui is set up, eigtoolgui.m 
(line 988) sets the Stop!/Go! button response to eigtool_switch_fn('Redraw').
Once the GUI is set up and an example commences, toggle_go_btn changes this:
    set(h,'Callback','eigtool_switch_fn(''STOP'');');
Hitting STOP then results in a call to eigtool_switch_fn with the_function=STOP.
The Mode+Cond.No button gets flipped to round *after* the end of this call....
But what on earth happens *after* this call?  I thought that was the end of the
"Stop" button routine.........

Note that the problem only occurs when ARPACK is running -- not when you hit
"Stop" during a dense pseudospectral computation...

Maybe there is something in arpackgui_update.m....  no, that seems OK.

** I notice that toggle_mode_btn.m is called, and this seems to be where 
   things go wrong.  I have found a fix, but not a satisfactory explanation.
   If the color of "Ritz Vec+Resid" is slightly off the color of "Mode+Cond.No",
   the the buttons are rendered as rectangles, and this seems to be robust.
   Thus, I have modified line 35 of toggle_mode_btn.m to read

   set(h,'BackgroundColor',[0.702 0.707 0.702]);  % mpe addition: keeps button rectangular

--------------------------------------------------------------------------------

16 Feb 2008

Jesse Chan pointed out that EigTool/ARPACK doesn't work when asking for
"BE" -- eigenvalues at both ends.  It also seems that the "LA" and "SA" options
have been removed, at least for non-symmetric A.  It seems best thus to cut 
these options -- as it seems that EigTool would be used infrequently enough
for a real-symmetric matrix to justify this exclusion.  (It would be clever
to check for real symmetry, and add those functions if that was the case.
I'll add this to the "wish list".

I changed lines 1359 and 1360 of eigtoolgui.m to remove the LA, SA, and BE options.

There is still code in arpackgui_update.m to handle the BE/LA/SA cases, but
I see no need to edit that, being consistent with the desire to make minimal
changes to TGW's code.

None of the canned demos seem to use these options.

It doesn't appear that the documention (help eigtool) needs to be fixed
to reflect this change. 

--------------------------------------------------------------------------------

10 July 2008

Wrote a script in RESEARCH/EIGTOOL/update1 that will update the version numbers
for the EigTool files.  I have decided to call this update "Version 2.1".
The script works like "update1 foo1.m foo2.m foo3.m".
The script update_version script will run update1 on all the m-files in
~/matlab/eigtoollib.

The AWK code for update1 is included below:

#!/bin/sh
 for args
    do
      verstring="% Version 2.1 (`date`)"
      awk '{if ($0~/% Version/) { print "'"$verstring"'"} 
            else {if ($0~/% Copyright/) 
                 { print "% Copyright 2002 - 2008 by Tom Wright; maintained by Mark Embree (embree@rice.edu)"} 
            else {print $0}}}'  $args > $$.tmp
      mv -f $$.tmp $args
    done

In looking for version information in other places, I noticed refreshed
a comment in ~/matlab/eigtoollib/html/eigtool/documentational/general.html
to reflect that fact that I now maintain EigTool, with my email address.


--------------------------------------------------------------------------------
14/15 March 2009

Prepping EigTool for release in advance of LNT's pseudospectra talk at
Trinity, Cambridge...

Bug 1 *******************************************************************
****** When A has dimension > 1000 and opts.print_plot = 1 but opts.dense
****** is set to the default, we get the bug:

> ??? Reference to non-existent field 'Z'.
> 
> Error in ==> switch_print at 80
>       Z = ps_data.zoom_list{ps_data.zoom_pos}.Z;
> 
> Error in ==> eigtool at 423
>     switch_print(fig,ps_data);

The logic controlling how the default value of "direct" is set is contained
in new_matrix.m.  Firstly, I'm not sure how one could get to the line 

    210   if n>1000 | (isfield(opts,'direct') & ~opts.direct),

with (isfield(opts,'direct') & ~opts.direct)  TRUE, 
since this line is only reached if direct = "auto", in which case
isfield(opts,'direct') should be zero.

I reworked the logic with the following philosophy:  Whether A is stored
as dense or sparse should control whether A is handled by a sparse or
direct method.  This is particularly an issue when print_plot = 1 is
turned on.

The new logic works, but the bug persists in the case that:
- print_plot = 1
- direct_method = 0 is set via the default logic

Fixed this bug up by adding some new logic around line 467 of new_matrix.m

Bug 2 *******************************************************************
****** AXLIMDLG has been removed from modern versions of MATLAB.  This is
****** used in situations where EigTool needs the user to input axes, 
****** i.e., for rectangular matrix and sparse direct methods.
****** I replaced the axlimdlg command with inputdlg commands -- not as clean,
****** but this seems to do the trick.

Bug 3 *******************************************************************
****** MATLAB crashes R2008a when I run eigtool(randn(100,50)).
****** The problem seems to be the psacore.mexmaci library.  We need to use
****** the version of zbandqrf.w ** with no underscores **.

Bug 4 *******************************************************************
****** On the Mac, text fields are truncated and too shallow.
****** Retweaked the GUI (eigtoolgui.m) by hand to make the boxes a bit bigger.

Bug 5 *******************************************************************
****** Sometimes the Go! button was still rounded....
****** Added a "drawnow" on line 13 of new_matrix.m.  This seems to fix the problem.

Bug 6 *******************************************************************
****** Load in a sparse matrix, choose ARPACK/eigs mode.  But then click
****** Direct.  This caused a crash.  The fix was very complicated, involving
****** copying/editing quite a bit of code form new_matrix.m into switch_redraw.m



Bug 6 *******************************************************************
****** If one loads in a large sparse matrix, then clicks "Direct", 
****** EigTool will crash.  To fix this, I added substantial code,
****** mostly lifted from new_matrix.m, to compute a Schur factorization
****** and find axes in this case.  I also added a "sparse_direct" field
****** to the ps_data data structure.

--------------------------------------------------------------------------------

General usage notes:

The standard call "eigtool(A)" (small, dense A) follows the following path:

        eigtool.m, line 315: call to "eigtoolgui" to set up gui
        eigtool.m, line 391: this "else" statment is triggered
        eigtool.m, line 404: psa are computed by "new_matrix" 
     new_matrix.m, line 26:  boolean thick_lines set by call to "check_opts"
     new_matrix.m, line 87:  hdl = findobj(fig,'Tag','ThickLines');
     new_matrix.m, general:  hdl is used to set the tick box on the gui
     new_matrix.m, line  99: sets defaultpatchlinewidth for thick contours
     new_matrix.m, line 100: sets defaultlinelinewidth for thick fov boundary
     new_matrix.m, line 102: sets defaultpatchlinewidth for thin contours
     new_matrix.m, line 103: sets defaultlinelinewidth for thin fov boundary
     new_matrix.m, line 432: psa are computed by "switch_origplot" 
switch_origplot.m, line 49:  psa are computed by "switch_redraw" 
  switch_redraw.m, line 31:  plot eigenvalues (already computed) 
  switch_redraw.m, line 120: psa are computed by "psa_computation" 
  switch_redraw.m, line 191: psa are plotted by "switch_redrawcontour" 
switch_redrawcontour.m, 93:  the critical "contour" call... data in "con"
switch_redrawcontour.m, 93:  this will use the defaultpatchlinewidth
psa_computation.m, general:  this handles the waitbar, stop button, 
psa_computation.m, general:  and organizes resolvent norm computations 
psa_computation.m, line 479: res norms computed in strips by calls to "psacore" 
        psacore.m, general:  this is the m-file version used by default 
        psacore.m, general:  if there is no mex file present.
        psacore.m, line 30:  useful (commented out) debut statement from TGW
